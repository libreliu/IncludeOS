#!/usr/bin/env python

import os
import sys
import argparse

INCLUDEOS_PREFIX = None
default_prefix = "/usr/local"

# Locate IncludeOS installation
if "INCLUDEOS_PREFIX" not in os.environ:
    INCLUDEOS_PREFIX = default_prefix
else:
    INCLUDEOS_PREFIX = os.environ['INCLUDEOS_PREFIX']

if not os.path.isdir(INCLUDEOS_PREFIX + "/includeos"):
    print "Couldn't find IncludeOS installation. If you installed to a non-default location (e.g. not " + default_loc + ") please set the environment variable INCLUDEOS_PREFIX to point to this location."
    sys.exit(0)

# Location of vmrunner
sys.path.append(INCLUDEOS_PREFIX + "/includeos")

from vmrunner import vmrunner
from vmrunner.prettify import color

# Argparse
parser = argparse.ArgumentParser(
  description="IncludeOS vmrunner. Builds and runs an IncludeOS service")

parser.add_argument("-c", "--clean", dest="clean", action="store_true",
                    help="Clean previous build before building")

parser.add_argument('vmargs',  nargs='*', help="Arguments to pass on to the VM start / main")

args = parser.parse_args()


nametag = "<boot>"

print color.INFO(nametag), "Args to pass to VM: ", args.vmargs

if len(vmrunner.vms) < 1:
    print color.FAIL("No vm description files found - nothing to boot")
    exit(-1)

print color.INFO(nametag), len(vmrunner.vms), "VM initialized. Commencing build- and boot..."

vm = vmrunner.vms[0]

if (args.clean):
    print color.INFO(nametag), "Cleaning build"
    vm.clean()

vm.cmake().boot(timeout = None, kernel_args=" ".join(args.vmargs))
