// This file is a part of the IncludeOS unikernel - www.includeos.org
//
// Copyright 2015 Oslo and Akershus University College of Applied Sciences
// and Alfred Bratterud
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#ifndef POSIX_SYS_SYSLOG_CONSTS_H
#define POSIX_SYS_SYSLOG_CONSTS_H

#ifdef __cplusplus
extern "C" {
#endif

#define LOG_PRIMASK 0x07		/* mask to extract priority part (internal) */

#define LOG_PRI(p)	((p) & LOG_PRIMASK)

#define LOG_FACMASK 0x03f8	/* facility mask: mask to extract facility part */

/*
	Macros for constructing the maskpri argument to setlogmask()
	The macros expand to an expression of type int when the argument
	pri is an expression of type int
*/
#define LOG_MASK(pri)	(1 << (pri))						/* mask for one priority */
//	Added: Mask of all priorities up to and including pri:
#define LOG_UPTO(pri)	((1 << ((pri)+1)) - 1)	/* all priorities through pri */

/*
	Possible facility values
	Symbolic constants for use as the facility argument to openlog()
*/
#define LOG_KERN		(0<<3)	/* Reserved for message generated by the system */
#define LOG_USER		(1<<3) 	/* Message generated by a process */
#define LOG_MAIL		(2<<3) 	/* Reserved for message generated by mail system */
#define LOG_NEWS		(3<<3) 	/* Reserved for message generated by news system */
#define LOG_UUCP		(4<<3) 	/* Reserved for message generated by UUCP system */
#define LOG_DAEMON	(5<<3) 	/* Reserved for message generated by system daemon */
#define LOG_AUTH		(6<<3) 	/* Reserved for message generated by authorization daemon */
#define LOG_CRON		(7<<3) 	/* Reserved for message generated by clock daemon */
#define LOG_LPR			(8<<3) 	/* Reserved for message generated by printer system */

#define LOG_LOCAL0	(16<<3)	/* Reserved for local use */
#define LOG_LOCAL1 	(17<<3)	/* Reserved for local use */
#define LOG_LOCAL2 	(18<<3)	/* Reserved for local use */
#define LOG_LOCAL3 	(19<<3)	/* Reserved for local use */
#define LOG_LOCAL4  (20<<3)	/* Reserved for local use */
#define LOG_LOCAL5 	(21<<3)	/* Reserved for local use */
#define LOG_LOCAL6 	(22<<3)	/* Reserved for local use */
#define LOG_LOCAL7 	(23<<3)	/* Reserved for local use */

/*
	Symbolic constants, where zero or more of which may be OR'ed together
	to form the logopt option of openlog()
*/
#define LOG_PID			0X01	/* Log the process ID with each message */
#define LOG_CONS		0X02 	/* Log to the system console on error */
#define LOG_NDELAY	0X04 	/* Connect to syslog daemon immediately */
#define LOG_ODELAY	0X08 	/* Delay open until syslog() is called */
#define LOG_NOWAIT	0X010	/* Do not wait for child processes */
													/* Deprecated? */
#define LOG_PERROR	0X020	/* ? Log to stderr */

/*
	Possible values of severity
	Symbolic constants for use as the priority argument of syslog()
*/
#define LOG_EMERG		0	/* A panic condition was reported to all processes */
#define LOG_ALERT		1 	/* A condition that should be corrected immediately */
#define LOG_CRIT		2 	/* A critical condition */
#define LOG_ERR			3 	/* An error message */
#define LOG_WARNING	4 	/* A warning message */
#define LOG_NOTICE	5 	/* A condition requiring special handling */
#define LOG_INFO		6 	/* A general information message */
#define LOG_DEBUG		7 	/* A message useful for debugging programs */

#ifdef __cplusplus
}
#endif

#endif