//-*- C++ -*-
// This file is a part of the IncludeOS unikernel - www.includeos.org
//
// Copyright 2017 Oslo and Akershus University College of Applied Sciences
// and Alfred Bratterud
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#pragma once
#ifndef NET_VLAN_API
#define NET_VLAN_API

#include <net/vlan_manager.hpp>
#include <net/super_stack.hpp>
#include <config>
#include <rapidjson/document.h>

namespace net {

template <typename T>
void setup_vlan_stack(const T& obj)
{
  Expects(obj.HasMember("iface"));
  Expects(obj.HasMember("id"));

  // Get the index (nic) the VLAN should be place upon
  auto iface = obj["iface"].GetInt();
  auto& nic = Super_stack::get<IP4>(iface).nic();

  // Get the VLAN id
  auto id = obj["id"].GetInt();
  // Create VLAN Nic on the physical Nic with VLAN id
  auto& vif = VLAN_manager::get().add(nic, id);

  // Create stack on VLAN Nic [iface, id]
  auto& stack = Super_stack::inet().create<IP4>(vif, iface, id);

  // Configure the network stack
  Expects(obj.HasMember("address"));
  Expects(obj.HasMember("netmask"));

  ip4::Addr address{obj["address"].GetString()};
  ip4::Addr netmask{obj["netmask"].GetString()};
  ip4::Addr gateway = (obj.HasMember("gateway"))
      ? ip4::Addr{obj["gateway"].GetString()} : 0;

  stack.network_config(address, netmask, gateway);
}

void setup_vlans()
{
  const auto& cfg = Config::get();
  INFO("VLAN setup", "Reading VLAN config...");

  Expects(not cfg.empty()
    && "No config found");

  rapidjson::Document doc;
  doc.Parse(cfg.data());

  Expects(doc.IsObject()
    && "Malformed config (not an object)");

  Expects(doc.HasMember("vlan")
    && "VLAN config not found (\"vlan\")");

  auto& vlan = doc["vlan"];
  Expects(vlan.IsArray()
    && "Malformed vlan config (not an array)");

  auto vlans = vlan.GetArray();

  INFO2("Found %i VLAN entries", vlans.Size());
  for(auto& entry : vlans)
    setup_vlan_stack(entry);

  INFO("VLAN setup", "Setup complete");
}

} //< namespace net

#endif
