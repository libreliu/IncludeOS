// -*-C++-*-
// This file is a part of the IncludeOS unikernel - www.includeos.org
//
// Copyright 2015 Oslo and Akershus University College of Applied Sciences
// and Alfred Bratterud
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#ifndef INCLUDEOS_COMMON_HEADER
#define INCLUDEOS_COMMON_HEADER

#if !defined(__cplusplus)
#error "IncludeOS must be built with a C++ compiler"
#endif

/* We're not building for linux */
#if defined(__linux__)
#warning "You are compiling for Linux target"
#endif

#if defined(_WIN32)
#warning "You are compiling for Win32 target"
#endif

/* We're only doing 32-bit ix86 targets. */
#if !defined(__i386__)
#warning "This project is targeted at the i386 architecture"
#endif

/* Unused parameters */
#ifdef __GNUC__
#  define UNUSED(x) UNUSED_ ## x __attribute__((__unused__))
#else
#  define UNUSED(x) UNUSED_ ## x
#endif

/* BOCHS Break point */
#define BREAK __asm__ volatile("xchg %bx,%bx");

/* debugging macros */
#include "debug"
#include "warn"
#include "info"

#include <gsl/gsl>

/* Define our own termination policy for contract   */
/* violation to generate relevant information about */
/* the reason for termination.                      */
#if defined(OS_TERMINATE_ON_CONTRACT_VIOLATION)

#include <cstdlib> // Needed for std::exit
#include <iostream> // Needed for std::err
#define OS_STRINGIFY(x) #x

/* Function used to set termination behaviour */
inline void expects_and_ensures_termination() { std::exit(EXIT_FAILURE); }

#undef Expects
#undef Ensures

#define Expects(cond)                                       \
  do {                                                      \
    if (not (cond)) {                                       \
      std::cerr << "OS: Precondition (" OS_STRINGIFY(cond)  \
                << ") failed...\n"  << "\t...in function: " \
                << __func__ << " @" << __FILE__ << ":"      \
                << __LINE__ << '\n';                        \
      std::set_terminate(expects_and_ensures_termination);  \
      std::terminate();                                     \
    }                                                       \
  } while(0)

#define Ensures(cond)                                       \
  do {                                                      \
    if (not (cond)) {                                       \
      std::cerr << "OS: Postcondition (" OS_STRINGIFY(cond) \
                << ") failed...\n"  << "\t...in function: " \
                << __func__ << " @" << __FILE__ << ":"      \
                << __LINE__ << '\n';                        \
      std::set_terminate(expects_and_ensures_termination);  \
      std::terminate();                                     \
    }                                                       \
  } while(0)

#endif //< defined(OS_TERMINATE_ON_CONTRACT_VIOLATION)

#define LIKELY(x)       __builtin_expect(!!(x), 1)
#define UNLIKELY(x)     __builtin_expect(!!(x), 0)


#endif //< INCLUDEOS_COMMON_HEADER
