// -*-C++-*-
// This file is a part of the IncludeOS unikernel - www.includeos.org
//
// Copyright 2015 Oslo and Akershus University College of Applied Sciences
// and Alfred Bratterud
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#ifndef INCLUDEOS_ARCH_HEADER
#define INCLUDEOS_ARCH_HEADER

#define ARCH_X86
#include <cstddef>
#include <cstdint>

extern void __arch_init();
extern void __arch_poweroff();
extern void __arch_reboot();
extern void __arch_enable_legacy_irq(uint8_t);
extern void __arch_disable_legacy_irq(uint8_t);

#ifdef ARCH_X86
inline uint64_t __arch_cpu_cycles() noexcept {
  uint64_t ret;
  asm("rdtsc" : "=A" (ret));
  return ret;
}

#include <array>
template <typename T, size_t N>
inline T& per_cpu_help(std::array<T, N>& array)
{
  unsigned cpuid;
  asm volatile("movl %%fs:(0x0), %0" : "=r" (cpuid));
  return array.at(cpuid);
}
#endif

// access a std::array of per-cpu structs based on CPU id
#define PER_CPU(x) (per_cpu_help<decltype(x)::value_type, x.size()>(x))

#endif
